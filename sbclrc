; -*- mode: Lisp;-*-

;; (setf *read-default-float-format* 'double-float)

(sb-ext:restrict-compiler-policy 'debug 3)
(sb-ext:set-sbcl-source-location "~/prog/sbcl")

(require 'asdf)
#-quicklisp
(let ((quicklisp-init
       (merge-pathnames ".roswell/lisp/quicklisp/setup.lisp"
                        (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)))

(ql:quickload :cl-annot)
(ql:quickload :clhs)
;; (ql:quickload :lisp-critic)
(annot:enable-annot-syntax)

(defpackage :ark (:use :cl))
(in-package :ark)

@export
(defmacro dis (args &rest body)
  "Disassemble a lambda expression."
  (flet ((arg-name (arg)
           (if (consp arg)
               (cadr arg)
               arg))
         (arg-decl (arg)
           (if (consp arg)
               `(type ,(car arg) ,(cadr arg))
               nil)))
    (let ((arglist (mapcar #'arg-name args))
          (declarations (mapcar #'arg-decl args)))
      `(disassemble
        (lambda ,arglist
          (declare ,@(remove nil declarations))
          ,@body)))))

@export
(defmacro disasm-method (name &rest specializers)
  "Disassemble a method.
Usage: (disasm-method #'package:generic-fun '(integer))"
  `(let* ((method (find-method (function ,name) nil '(,@specializers)))
          (function (sb-mop:method-function method))
          (fast-function (sb-pcl::%method-function-fast-function function)))
     (disassemble fast-function)))
